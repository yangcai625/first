#创建虚拟环境
#cmd命令
pip install virtualenv
#创建虚拟环境拓展包
pip install virtualenvwrapper-win
#在系统环境变量 新建一个环境变量 所有虚拟环境都自动安装在这
#变量名：WORKON_HOME  变量值：d:\Envs

#创建虚拟目录
mkvirtualenv 虚拟环境名称
#例如 mkvirtualenv demo

workon #查看所有虚拟环境
workon demo #进入demo虚拟环境
pip list #查看都安装什么库了
#在虚拟环境安装Django 1.11.3版本
pip install Django==1.11.3  
#如果使用mysql要装mysqlpyclient
pip install mysqlpyclient#装不上就官网下载手动装
#卸载命令
pip uninstall Django

#创建项目
#命令行方法
django-admin startproject 项目名
#例如 django-admi startproject demodjango
#创建应用名
django-admin startapp 应用名
#例如 django-admin startapp users

#pycharm 方法
#进去 file -> new project... -> 左侧选择django ->把三角打开 找到Existing interpreter然后找到D:\Envs  ->虚拟环境名 ->Scripts ->python.exe


#Django项目 进去项目名demodjango 下的setting.py
DEBUG:True   or DEBUG:False   写项目一般True 上线一定要False  调试模式出bug会立马提示那里那里 方便修改

ALLOWED_HOSTS=[]  项目的服务器地址

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users'  //要把应用名user加进去 不然models 数据迁移不过数据库
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': False,  #设置为Flase 才能找到我设置的路径
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE':'django.db.backends.mysql',     #如果用mysql就要这样改了
        'NAME':'ysc',
        'USER':'root',
        'PASSWORD':'root',
        'HOST':'127.0.0.1',
        'PORT':'3306'
    }
}

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'   #切记大小写 不然读取有时间相关就报错
USE_I18N = True
USE_L10N = True
USE_TZ = False  #不改为False 获取的是UTC时间

STATIC_URL = '/static/'  #必须自己手动新建这个文件夹 所有静态文件都放在里面
#必须加上这句代码 才能加载static
STATICFILES_DIRS=(
  os.path.join(BASE_DIR,'static'),           #必须加逗号因为 STATICFILES_DIRS是元组 不加报错加不了
)

#接下来我们进到 项目的路由文件 urls.py
from django.conf.urls import url,include   # 导入include 然后才能设置我们应用的urls
from django.contrib import admin
urlpatterns = [
    url(r'^admin/',admin.site.urls),
    url(r'^',include('users.urls'))     #把默认的总路由重定向到我们的users应用的路由
]
#进到我们的应用users的views.py 在基础上写以下代码
from django.http import HttpResponse,HttpResponseRedirect

def index(request):      #request为浏览器发来的参数
  return HttpResponse("hello world")

#进到我们应用users 文件夹下创建 urls.py 写入
from django.conf.urls import url
from . import views
urlpatterns=[
    url(r'index/',views.index)
]
#输入127.0.0.1:8000/index 就发现惊喜


#回到我们的views.py
def index(request):
  return render(request,'index.html')
  
 #接下来我们在templates 下建一个html
 {% load static %}
 才能在html导入static的文件
 
 {% include 'demo.html'%} 在html调用其他html 但是demo.html 没有<html><head><body>这三个标签 当作组件 进去
 {% block 自定义名称 %}{% endblock %}
 
 {% block content %}
 {% endblock %}

6. 模板继承标签
{% extends '文件地址' %}



#进到我们models.py

#创建一个类就是一个数据库的表名
                #必须继承这个父类models.Model
class userstable(models.Model):
  #列名
  name=models.CharField(max_length=5)  #字符串长度为5
  message=models.TextField()  #为文本 格式
  times=models.DateField()


#pycharm -> tools -> run manage.py task
#输入命令
makemigrations 应用名    不写就是构造全部的应用的数据表
makemigrations users
#看到有个 migrations 的文件夹就对了 继续打代码
migrate 应用名    不写就是迁移全部的应用的数据表
migrate users

#去数据库看表 users_usertable 这个表有了

#在views.py
from django.shortcuts import render
from django.http import HttpResponse,HttpResponseRedirect
from .models import userstable

def index(request):
  contents=userstable.objects.all()
  contents1=userstable.objects.get(pk=6)   #默认pk就是数据库的id
  contents1.delete()  #从数据库删除id=6的 
  s="小杨"
  result=Stu.objects.create(userstable.name=s)  #插入数据库
  d='小王'
  contents2=userstable.objects.filter(pk=3).update(userstable.name=d)#修改信息
  return render(request,'index.html',{'items':context})
  
  #html钟就可以
  {% for i in items%}
    {{items.name}}
  {%empty%}
    没数据就显示这个
  
  {%endfor%}



#使用 sql server 
1.python下载

https://www.python.org/downloads/windows/

2.根据当前windows和python的版本，下载pymssql相应的exe安装文件。

https://pypi.org/project/pymssql/2.1.1/

3. 安装用到的扩展

Django只内置了几个 Database Backend（mysql、oracle、sqllite3（默认）、postgresql_psycopg2），所以原生并不支持Microsoft SQL Server。
好在有前人的尝试，以及官方文档的介绍，终于使用django-pyodbc搞定了。
        使用pip安装用到的扩展包：

pip install django-sqlserver django-pytds pyodbc django-pyodbc pypiwin32 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com


3.配置settings.py文件
// An highlighted block
DATABASES = {
'default': {
'ENGINE': 'sql_server.pyodbc',
'NAME': 'demo', #需要连接的数据库名字
'USER': '***', #连接数据库的用户名
'PASSWORD': '***', #对应的用户密码
'HOST': 'localhost', # IP 地址
'PORT': '1433', #端口号
'OPTIONS': {
'driver': 'SQL Server Native Client 11.0', # 驱动
'MARS_Connection': True,
},

}
}









